{"ast":null,"code":"import moment from \"moment\";\nexport const formatCurrency = function () {\n  let moneyP = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"0\";\n  let n = arguments.length > 1 ? arguments[1] : undefined;\n  let x = arguments.length > 2 ? arguments[2] : undefined;\n  let s = arguments.length > 3 ? arguments[3] : undefined;\n  let c = arguments.length > 4 ? arguments[4] : undefined;\n  let moneyS = moneyP.replace(/[^\\d]/g, \"\");\n  try {\n    let money = Number(moneyS);\n    const re = \"\\\\d(?=(\\\\d{\" + (x || 3) + \"})+\" + (n > 0 ? \"\\\\D\" : \"$\") + \")\",\n      num = parseFloat(money.toString()).toFixed(Math.max(0, ~~n));\n    return (c ? num.replace(\".\", c) : num).replace(new RegExp(re, \"g\"), \"$&\" + (s || \",\"));\n  } catch (e) {\n    return \"0\";\n  }\n};\nexport const toDayYMD = moment();\nexport const toDaySubMonthYMD = moment().subtract(1, \"month\");\nexport const toDaySub30DayYMD = moment().subtract(30, \"day\");\nexport const toDayAddDaySubMonthYMD = moment().add(1, \"day\").subtract(1, \"month\");\nexport const formatDayjs = dateString => moment(dateString, \"DD/MM/YYYY\");\nexport const formatDateTimeToString = dateString => {\n  try {\n    if (dateString) {\n      return moment(dateString).format(\"DD/MM/YYYY HH:mm:ss\").toString();\n    }\n    return null;\n  } catch (e) {\n    return null;\n  }\n};\nexport function splitText(string, length) {\n  // Split text into individual words and count length\n  // const words = string.split('...');\n  const count = string === null || string === void 0 ? void 0 : string.length;\n  // Loop through words whilst position is less than count\n  if (count > length) {\n    // Prepare text for specified length and increment position\n    const text = string.substring(0, length + 1);\n\n    // Append text element\n\n    return text;\n  } else return string;\n}","map":{"version":3,"names":["moment","formatCurrency","moneyP","n","x","s","c","moneyS","replace","money","Number","re","num","parseFloat","toString","toFixed","Math","max","RegExp","e","toDayYMD","toDaySubMonthYMD","subtract","toDaySub30DayYMD","toDayAddDaySubMonthYMD","add","formatDayjs","dateString","formatDateTimeToString","format","splitText","string","length","count","text","substring"],"sources":["/Users/tao/DEPLOY/booking-home/src/utils/helper.js"],"sourcesContent":["import moment from \"moment\";\nexport const formatCurrency = (moneyP = \"0\", n, x, s, c) => {\n  let moneyS = moneyP.replace(/[^\\d]/g, \"\");\n  try {\n    let money = Number(moneyS);\n    const re = \"\\\\d(?=(\\\\d{\" + (x || 3) + \"})+\" + (n > 0 ? \"\\\\D\" : \"$\") + \")\",\n      num = parseFloat(money.toString()).toFixed(Math.max(0, ~~n));\n\n    return (c ? num.replace(\".\", c) : num).replace(\n      new RegExp(re, \"g\"),\n      \"$&\" + (s || \",\")\n    );\n  } catch (e) {\n    return \"0\";\n  }\n};\n\nexport const toDayYMD = moment();\nexport const toDaySubMonthYMD = moment().subtract(1, \"month\");\nexport const toDaySub30DayYMD = moment().subtract(30, \"day\");\nexport const toDayAddDaySubMonthYMD = moment()\n  .add(1, \"day\")\n  .subtract(1, \"month\");\nexport const formatDayjs = (dateString) => moment(dateString, \"DD/MM/YYYY\");\nexport const formatDateTimeToString = (dateString: any) => {\n  try {\n    if (dateString) {\n      return moment(dateString).format(\"DD/MM/YYYY HH:mm:ss\").toString();\n    }\n    return null;\n  } catch (e) {\n    return null;\n  }\n};\nexport function splitText(string, length) {\n  // Split text into individual words and count length\n  // const words = string.split('...');\n  const count = string?.length;\n  // Loop through words whilst position is less than count\n  if (count > length) {\n    // Prepare text for specified length and increment position\n    const text = string.substring(0, length + 1);\n\n    // Append text element\n\n    return text;\n  } else return string;\n}\n"],"mappings":"AAAA,OAAOA,MAAM,MAAM,QAAQ;AAC3B,OAAO,MAAMC,cAAc,GAAG,YAA8B;EAAA,IAA7BC,MAAM,uEAAG,GAAG;EAAA,IAAEC,CAAC;EAAA,IAAEC,CAAC;EAAA,IAAEC,CAAC;EAAA,IAAEC,CAAC;EACrD,IAAIC,MAAM,GAAGL,MAAM,CAACM,OAAO,CAAC,QAAQ,EAAE,EAAE,CAAC;EACzC,IAAI;IACF,IAAIC,KAAK,GAAGC,MAAM,CAACH,MAAM,CAAC;IAC1B,MAAMI,EAAE,GAAG,aAAa,IAAIP,CAAC,IAAI,CAAC,CAAC,GAAG,KAAK,IAAID,CAAC,GAAG,CAAC,GAAG,KAAK,GAAG,GAAG,CAAC,GAAG,GAAG;MACvES,GAAG,GAAGC,UAAU,CAACJ,KAAK,CAACK,QAAQ,EAAE,CAAC,CAACC,OAAO,CAACC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE,CAAC,CAACd,CAAC,CAAC,CAAC;IAE9D,OAAO,CAACG,CAAC,GAAGM,GAAG,CAACJ,OAAO,CAAC,GAAG,EAAEF,CAAC,CAAC,GAAGM,GAAG,EAAEJ,OAAO,CAC5C,IAAIU,MAAM,CAACP,EAAE,EAAE,GAAG,CAAC,EACnB,IAAI,IAAIN,CAAC,IAAI,GAAG,CAAC,CAClB;EACH,CAAC,CAAC,OAAOc,CAAC,EAAE;IACV,OAAO,GAAG;EACZ;AACF,CAAC;AAED,OAAO,MAAMC,QAAQ,GAAGpB,MAAM,EAAE;AAChC,OAAO,MAAMqB,gBAAgB,GAAGrB,MAAM,EAAE,CAACsB,QAAQ,CAAC,CAAC,EAAE,OAAO,CAAC;AAC7D,OAAO,MAAMC,gBAAgB,GAAGvB,MAAM,EAAE,CAACsB,QAAQ,CAAC,EAAE,EAAE,KAAK,CAAC;AAC5D,OAAO,MAAME,sBAAsB,GAAGxB,MAAM,EAAE,CAC3CyB,GAAG,CAAC,CAAC,EAAE,KAAK,CAAC,CACbH,QAAQ,CAAC,CAAC,EAAE,OAAO,CAAC;AACvB,OAAO,MAAMI,WAAW,GAAIC,UAAU,IAAK3B,MAAM,CAAC2B,UAAU,EAAE,YAAY,CAAC;AAC3E,OAAO,MAAMC,sBAAsB,GAAID,UAAe,IAAK;EACzD,IAAI;IACF,IAAIA,UAAU,EAAE;MACd,OAAO3B,MAAM,CAAC2B,UAAU,CAAC,CAACE,MAAM,CAAC,qBAAqB,CAAC,CAACf,QAAQ,EAAE;IACpE;IACA,OAAO,IAAI;EACb,CAAC,CAAC,OAAOK,CAAC,EAAE;IACV,OAAO,IAAI;EACb;AACF,CAAC;AACD,OAAO,SAASW,SAAS,CAACC,MAAM,EAAEC,MAAM,EAAE;EACxC;EACA;EACA,MAAMC,KAAK,GAAGF,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEC,MAAM;EAC5B;EACA,IAAIC,KAAK,GAAGD,MAAM,EAAE;IAClB;IACA,MAAME,IAAI,GAAGH,MAAM,CAACI,SAAS,CAAC,CAAC,EAAEH,MAAM,GAAG,CAAC,CAAC;;IAE5C;;IAEA,OAAOE,IAAI;EACb,CAAC,MAAM,OAAOH,MAAM;AACtB"},"metadata":{},"sourceType":"module"}